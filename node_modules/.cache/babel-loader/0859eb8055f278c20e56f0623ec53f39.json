{"ast":null,"code":"import { isReactive, isReadonly, unref, ref, computed, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, isVue3, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\n\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults); // Collect and merge this level validation results\n  // with all nested validation results\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\n\nfunction useVuelidate(validations, state) {\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || getCurrentInstance();\n  const componentOptions = instance ? isVue3 ? instance.type : instance.proxy.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance.proxy;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance: instance.proxy,\n          externalResults: $externalResults || instance.proxy.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance ? instance.proxy : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };","map":{"version":3,"sources":["C:/Users/dragu/Dev/Desafios/ow-interactive-desafio/node_modules/@vuelidate/core/dist/index.esm.js"],"names":["isReactive","isReadonly","unref","ref","computed","watch","reactive","isRef","nextTick","inject","provide","getCurrentInstance","isVue3","onBeforeMount","onBeforeUnmount","unwrapObj","obj","ignoreKeys","arguments","length","undefined","Object","keys","reduce","o","k","includes","isFunction","val","isProxy","value","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","concat","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","forEach","key","v","startsWith","_empty","ROOT_PATH","_call","body","direct","e","_callIgnored","_invoke","_async","f","args","i","apply","createValidationResults","resultsCache","path","externalResults","ruleKeys","cachedResult","get","$partial","$path","$touch","$reset","$commit","set","ruleKey","$externalResults","map","stringError","index","$uid","r","some","$error","$silentErrors","filter","res","$errors","Date","now","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","nestedResults","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","$validate","mergedConfig","unwatch","assign","s","cachedExternalResults","external","$autoDirty","flush","$getResultsForChild","$clearExternalResults","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","__vuelidateInjectInstances","removeChildResultsFromParent","childKey","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","useVuelidate","currentVueInstance","componentOptions","type","proxy","$options","uid","_uid","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","default"],"mappings":"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","sourcesContent":["import { isReactive, isReadonly, unref, ref, computed, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, isVue3, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults); // Collect and merge this level validation results\n  // with all nested validation results\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nfunction useVuelidate(validations, state) {\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || getCurrentInstance();\n  const componentOptions = instance ? isVue3 ? instance.type : instance.proxy.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    const uid = instance.uid || instance._uid;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance.proxy;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance: instance.proxy,\n          externalResults: $externalResults || instance.proxy.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance ? instance.proxy : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"]},"metadata":{},"sourceType":"module"}