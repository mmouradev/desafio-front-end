{"ast":null,"code":"import { createStore } from \"vuex\";\n\nfunction updateLocalStorage(cart) {\n  localStorage.setItem('cart', JSON.stringify(cart));\n}\n\nexport default createStore({\n  state: {\n    cart: []\n  },\n  getters: {\n    quantityProductInCart: state => product => {\n      let quantity = 0;\n      state.cart.map(product => quantity += product.quantity);\n      return quantity;\n    },\n    cartItems: state => {\n      return state.cart;\n    }\n  },\n  mutations: {\n    addToCart(state, product) {\n      let item = state.cart.find(i => i.id === product.id);\n\n      if (item) {\n        item.quantity++;\n      } else {\n        state.cart.push({ ...product,\n          quantity: 1\n        });\n      }\n\n      updateLocalStorage(state.cart);\n    },\n\n    removeFromCart(state, product) {\n      let item = state.cart.find(i => i.id === product.id);\n\n      if (item) {\n        if (item.quantity > 1) {\n          item.quantity--;\n        } else {\n          state.cart = state.cart.filter(i => i.id !== product.id);\n        }\n      }\n\n      updateLocalStorage(state.cart);\n    },\n\n    updateCartFromLocalStorage(state) {\n      const cart = localStorage.getItem('cart');\n\n      if (cart) {\n        state.cart = JSON.parse(cart);\n      }\n    }\n\n  },\n  actions: {},\n  modules: {}\n});","map":{"version":3,"sources":["C:/Users/dragu/Dev/Desafios/ow-interactive-desafio/src/store/index.js"],"names":["createStore","updateLocalStorage","cart","localStorage","setItem","JSON","stringify","state","getters","quantityProductInCart","product","quantity","map","cartItems","mutations","addToCart","item","find","i","id","push","removeFromCart","filter","updateCartFromLocalStorage","getItem","parse","actions","modules"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChCC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACD;;AAED,eAAeF,WAAW,CAAC;AACzBO,EAAAA,KAAK,EAAE;AACLL,IAAAA,IAAI,EAAE;AADD,GADkB;AAIzBM,EAAAA,OAAO,EAAE;AACPC,IAAAA,qBAAqB,EAAGF,KAAD,IAAYG,OAAD,IAAa;AAC7C,UAAIC,QAAQ,GAAG,CAAf;AACAJ,MAAAA,KAAK,CAACL,IAAN,CAAWU,GAAX,CAAgBF,OAAD,IAAaC,QAAQ,IAAID,OAAO,CAACC,QAAhD;AAEA,aAAOA,QAAP;AACD,KANM;AAOPE,IAAAA,SAAS,EAAGN,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACL,IAAb;AACD;AATM,GAJgB;AAezBY,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,CAACR,KAAD,EAAQG,OAAR,EAAiB;AACxB,UAAIM,IAAI,GAAGT,KAAK,CAACL,IAAN,CAAWe,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAST,OAAO,CAACS,EAAtC,CAAX;;AAEA,UAAIH,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACL,QAAL;AACD,OAFD,MAEO;AACLJ,QAAAA,KAAK,CAACL,IAAN,CAAWkB,IAAX,CAAgB,EAAE,GAAGV,OAAL;AAAcC,UAAAA,QAAQ,EAAE;AAAxB,SAAhB;AACD;;AAEDV,MAAAA,kBAAkB,CAACM,KAAK,CAACL,IAAP,CAAlB;AACD,KAXQ;;AAYTmB,IAAAA,cAAc,CAACd,KAAD,EAAQG,OAAR,EAAiB;AAC7B,UAAIM,IAAI,GAAGT,KAAK,CAACL,IAAN,CAAWe,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAST,OAAO,CAACS,EAAtC,CAAX;;AAEA,UAAIH,IAAJ,EAAU;AACR,YAAIA,IAAI,CAACL,QAAL,GAAgB,CAApB,EAAuB;AACrBK,UAAAA,IAAI,CAACL,QAAL;AACD,SAFD,MAEO;AACLJ,UAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWoB,MAAX,CAAkBJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAST,OAAO,CAACS,EAAxC,CAAb;AACD;AACF;;AAEDlB,MAAAA,kBAAkB,CAACM,KAAK,CAACL,IAAP,CAAlB;AACD,KAxBQ;;AAyBTqB,IAAAA,0BAA0B,CAAChB,KAAD,EAAQ;AAChC,YAAML,IAAI,GAAGC,YAAY,CAACqB,OAAb,CAAqB,MAArB,CAAb;;AACA,UAAItB,IAAJ,EAAU;AACRK,QAAAA,KAAK,CAACL,IAAN,GAAaG,IAAI,CAACoB,KAAL,CAAWvB,IAAX,CAAb;AACD;AACF;;AA9BQ,GAfc;AA+CzBwB,EAAAA,OAAO,EAAE,EA/CgB;AAgDzBC,EAAAA,OAAO,EAAE;AAhDgB,CAAD,CAA1B","sourcesContent":["import { createStore } from \"vuex\";\r\n\r\nfunction updateLocalStorage(cart) {\r\n  localStorage.setItem('cart', JSON.stringify(cart))\r\n}\r\n\r\nexport default createStore({\r\n  state: {\r\n    cart: [],\r\n  },\r\n  getters: {\r\n    quantityProductInCart: (state) => (product) => {\r\n      let quantity = 0;\r\n      state.cart.map((product) => quantity += product.quantity);\r\n\r\n      return quantity;\r\n    },\r\n    cartItems: (state) => {\r\n      return state.cart\r\n    }\r\n  },\r\n  mutations: {\r\n    addToCart(state, product) {\r\n      let item = state.cart.find(i => i.id === product.id)\r\n\r\n      if (item) {\r\n        item.quantity++\r\n      } else {\r\n        state.cart.push({ ...product, quantity: 1 })\r\n      }\r\n\r\n      updateLocalStorage(state.cart)\r\n    },\r\n    removeFromCart(state, product) {\r\n      let item = state.cart.find(i => i.id === product.id)\r\n\r\n      if (item) {\r\n        if (item.quantity > 1) {\r\n          item.quantity--\r\n        } else {\r\n          state.cart = state.cart.filter(i => i.id !== product.id)\r\n        }\r\n      }\r\n\r\n      updateLocalStorage(state.cart)\r\n    },\r\n    updateCartFromLocalStorage(state) {\r\n      const cart = localStorage.getItem('cart')\r\n      if (cart) {\r\n        state.cart = JSON.parse(cart)\r\n      }\r\n    }\r\n  },\r\n  actions: {},\r\n  modules: {}\r\n})"]},"metadata":{},"sourceType":"module"}